<style lang="less">
  /** less **/
  .modal-mask {
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
    background: #000;
    opacity: 0.5;
    overflow: hidden;
    z-index: 900;
    color: #fff;
  }
  .modal-dialog {
    // overflow: hidden;
    position: fixed;
    z-index: 998;
    background: #f9f9f9;
    width: 0px;
    overflow:auto;
  }
</style>

<template lang="wxml">
  <view wx:if="{{showModal}}" class="modal-mask" @tap="hideModal" catchtouchmove="preventTouchMove">
  </view>
  <view animation="{{animationData}}" catchtouchmove="preventTouchMove" class="modal-dialog" style="{{popupStyle}}">
    <slot>
    </slot>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import {
    getSysWidth
  } from '../lib/wx-system.js'
  export default class popup extends wepy.component {
    components = {}
    data = {
      animationData: {},
      popupStyle: ''
    }
    watch = {
      showModal(newValue, oldValue) {
        if (this.type === 'top') {
          this.popupStyle = `height:${this.size}rpx;width:100%;top:${-this.size}rpx;`
          if (newValue && !oldValue) {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateY(this.size * (getSysWidth() / 750)).step()
            this.$apply()
          } else {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateY(0).step()
            this.$apply()
          }
        } else if (this.type === 'right') {
          this.popupStyle = `width:${this.size}rpx;right:${-this.size}rpx;top:0px;bottom:0px;`
          if (newValue && !oldValue) {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateX(-this.size * (getSysWidth() / 750)).step()
            this.$apply()
          } else {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateX(0).step()
            this.$apply()
          }
        } else if (this.type === 'bottom') {
          this.popupStyle = `height:${this.size}rpx;bottom:${-this.size}rpx;width:100%;`
          if (newValue && !oldValue) {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateY(-this.size * (getSysWidth() / 750)).step()
            this.$apply()
          } else {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateY(0).step()
            this.$apply()
          }
        } else if (this.type === 'left') {
          this.popupStyle = `width:${this.size}rpx;left:${-this.size}rpx;top:0px;bottom:0px;`
          if (newValue && !oldValue) {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateX(this.size * (getSysWidth() / 750)).step()
            this.$apply()
          } else {
            this.animationData = wepy.createAnimation({
              duration: this.duration,
              timingFunction: 'ease'
            })
            this.animationData.translateX(0).step()
            this.$apply()
          }
        }
      }
    }
    props = {
      type: {
        type: String,
        default: 'right',
        twoWay: true
      },
      showModal: {
        type: Boolean,
        default: false,
        twoWay: true
      },
      size: {
        type: String,
        default: '400'
      },
      duration: {
        type: String,
        default: '400'
      }
    }
    methods = {
      hideModal() {
        this.showModal = false
        this.$apply()
        // 标签中使用 v-on:hideModal="hideModal"
        // this.$emit('hideModal')
      },
      preventTouchMove() {
        console.warn('preventTouchMove方法已阻止其他事件。')
      }
    }
    onShow() {}
    events = {
      hideModal() {
        this.showModal = false
        this.$apply()
      }
    };
  }
</script>
