<style lang="less">
  .body {
    height: 100vh;
    width: 100vw;
    display: flex;
    flex-direction: column;
    background: #ffffff;
  }
  // header-搜索框
  .view-search{
    width: 100%;
    padding:19rpx 0;
    border-bottom: 2rpx solid #E5E5E5;
  }
  .view-search-cont{
    width: 640rpx;
    height: 60rpx;
    background: #F5F5F5;
    border-radius: 30rpx;
    display:flex;
    margin:0 auto;
    align-items:center;
  }
  .view-search-icon{
    width: 30rpx;
    height: 30rpx;
    margin: 0 28rpx;
  }
  .view-search-input{
    font-size: 28rpx;
    color: #999999;
  }
  // 滚动区域scroll
  .scroll-view {
    flex:1;
    height:calc( 100% - 198rpx );
    width:100%;
  }
  // gps定位
  .view-gpsLocation{
    width:100%;
    height:100rpx;
    display:flex;
    align-items:center;
    justify-content:center;
  }
  .view-gpsLocation-cont{
    width: 660rpx;
    height: 99rpx;
    display:flex;
    align-items:center;
    line-height:99rpx;
    border-bottom: 2rpx solid #E5E5E5;
  }
  .view-gpsLocation-icon{
    width: 30rpx;
    height: 30rpx;
  }
  .view-gpsLocation-addressName{
    width: 80rpx;
    height: 40rpx;
    font-size: 40rpx;
    color: #333333;
    margin: 0 10rpx 0 30rpx;
    display:flex;
    align-items:center;
  }
  .view-gpsLocation-gps{
    width: 106rpx;
    height: 36rpx;
    color: #999999;
    font-size: 26rpx;
    display:flex;
    align-items:center;
  }
  // 历史-热门城市
  .view-popularCity{
    width:100%;
  }
  .view-popularCity-cont{
    width: 100%;
    
  }
  .view-popularCity-title{
    width: 158rpx;
    height: 30rpx;
    color: #999999;
    font-size: 26rpx;
    margin: 30rpx 0 30rpx 40rpx;
  }
  .view-popular-city-cont{
    display: flex;
    flex-wrap:wrap;
    padding-left:20rpx;
  }
  .view-popular-city{
    width: 200rpx;
    height: 70rpx;
    line-height: 70rpx;
    font-size: 28rpx;
    color: #333333;
    text-align: center;
    border-radius: 4rpx;
    box-sizing:border-box;
    margin: 0 0px 20rpx 20rpx;
    border: 2rpx solid #dddddd;
  }
  .view-popular-city-hover{
    background: #DDDDDD;
  }
  // 隔离带
  .view-quarantine{
    width: 100%;
    height: 20rpx;
    background: #F5F5F5;
  }
  // 城市列表
  .city-letter {
    color: #999999;
    font-size:24rpx;
    width:660rpx;
    margin:30rpx auto 0 auto;
  }
  .city-item {
    height: 100rpx;
    line-height: 100rpx;
    background-color: white;
    text-indent: 47rpx;
    font-size: 28rpx;
    position: relative;
    &::after {
      content: ' ';
      display: block;
      height: 1px;
      width: 90%;
      position: absolute;
      left: 5%;
      bottom: 0;
      background-color: #DDD;
      transform: scaleY(.5)
    }
    &:active {
      opacity: .7;
    }
  }
  .index-list {
    height:100%;
    width: 60rpx; // background-color: red;
    position: fixed;
    right: 0px;
    top: 50%;
    margin-top: -177px; // top: calc(10vh + 40px);
    display: flex;
    flex-direction: column;
  }
  .index-list-item {
    width: 100%; // flex: 1;
    height: 20rpx;
    line-height: 20rpx;
    font-size: 22rpx;
    display: flex;
    padding-left: 10rpx;
    padding-top: 8rpx;
    padding-bottom: 8rpx;
    justify-content: center;
    align-items: center;
    color:#496888;
  }
  .letter-notify {
    height: 80px;
    width: 80px;
    background-color: rgba(0, 0, 0, .7);
    position: fixed;
    top: 50%;
    left: 50%;
    margin-top: -40px;
    margin-left: -40px;
    border-radius: 5px;
    color: white;
    line-height: 80px;
    font-size: 100rpx;
    text-align: center;
  }
  // 获取焦点输入框
  .view-onFocus{
    width: 100%;
    height: 100%;
  }
  .view-delete-icon{
    width: 30rpx;
    height: 30rpx;
    margin: 0 auto;
  }
</style>
<template>
  <view class="body">
    <!-- 搜索框 -->
    <view class="view-search">
      <view class="view-search-cont">
        <view class="view-search-icon">
          <image src="../images/position-icon.png" style="width:100%;height:100%;"></image>
        </view>
        <input 
          placeholder-class="view-search-input"
          placeholder="输入城市名或拼音查询"
          @focus="onFocus()"
          @input="onInput({{$event}})"
          value="{{searchResults}}"
        />
        <view wx:if="{{focusShow}}" class="view-delete-icon" @tap="deleteIcon">
          <image src="../images/searchList-iconDelete.png" style="width:100%;height:100%;"></image>
        </view>
      </view>
    </view>

    <!-- 搜索获取焦点 -->
    <view class="view-onFocus" wx:if="{{focusShow}}">
      <scroll-view 
        wx:if="{{searchResult.length}}" 
        style="height: 100%; width: 100%; background-color: white"
        scroll-y>
        <repeat for="{{searchResult}}">
          <view class="city-item" @tap="onSelected({{item}})">
            {{ item.name }}
          </view>
        </repeat>
      </scroll-view>
    </view>

    <!-- 可滚动列表 -->
    <scroll-view wx:if="{{scrollShow}}" class="fit scroll-view" scroll-y scroll-into-view="{{scrollIntoId}}">

      <!-- <view id="top" class="city-letter">当前定位城市：</view>
      <view wx:if="{{locationFail}}" class="city-item">定位失败</view>
      <view wx:else class="city-item" @tap="onLocationTaped()">
        {{ location ? location : '定位中...' }}
      </view> -->

      <!-- GPS定位 -->
      <view class="view-gpsLocation">
        <view class="view-gpsLocation-cont"> 
          <view class="view-gpsLocation-icon">
            <image src="../images/searchList-icon.png" style="width:100%;height:100%;display:flex;"></image>
          </view>
          <view class="view-gpsLocation-addressName">{{address}}</view>
          <view class="view-gpsLocation-gps">GPS定位</view>
        </view>
      </view>
      <!-- 历史访问城市 -->
      <!-- <view class="view-popularCity">
        <view class="view-popularCity-cont">
          <view class="view-popularCity-title">历史城市</view>
          <view class="view-popular-city-cont">
            <repeat for="{{hotCityss}}">
              <view class="view-popular-city" hover-class="view-popular-city-hover" @tap="onSelected({{item}})">{{item.name}}</view>
            </repeat>
          </view>
        </view>
      </view> -->
      <!-- 热门城市 popular-->
      <view class="view-popularCity">
        <view class="view-popularCity-cont">
          <view class="view-popularCity-title">热门城市</view>
          <view class="view-popular-city-cont">
            <repeat for="{{hotCityss}}">
              <view class="view-popular-city" hover-class="view-popular-city-hover" @tap="onSelected({{item}})">{{item.name}}</view>
            </repeat>
          </view>
        </view>
      </view>
      <!-- 灰色隔离层-->
      <view class="view-quarantine"></view>
      <!-- 城市列表 -->
      <repeat for="{{citys}}" key="letter.letter" item="letter">
        <view>
          <view class="city-letter" id="{{letter.letter}}">{{ letter.letter }}</view>
          <repeat for="{{letter.cityInfo}}" key="city.id" item="city">
            <view class="city-item" @tap="onSelected({{city}})">{{ city.name }}</view>
          </repeat>
        </view>
      </repeat>
      <!-- 右侧26字母 -->
      <view class="index-list">
        <repeat for="{{letters}}">
          <view class="index-list-item" data-letter="{{item}}" @touchstart.stop="onListTouchStart" @touchmove.stop="onListTouchMove" @touchend.stop="onListTouchEnd">{{ item }}</view>
        </repeat>
      </view>
      <view wx:if="{{currentLetter}}" class="letter-notify">{{ currentLetter }}</view>
    </scroll-view>

  </view>
</template>
<script>
  import wepy from 'wepy'
  import citys from '../lib/city.js'
  import {test} from '../server/index.js'
  export default class addressList extends wepy.page {
    config = {
      navigationBarTitleText: '选择城市'
    }
    data = {
      citys: [],
      scrollIntoId: '',
      currentLetter: '',
      location: '',
      locationFail: false,
      letterHeight: 18,
      startPageY: 0,
      timer: null,
      showSearch: false,
      searchResult: [],
      searchResults:'',
      address: '上海',
      scrollShow:true,
      focusShow:false,
      hotCityss: [{
          data_name: '0',
          name: '北京'
        },
        {
          data_name: '1',
          name: '上海'
        },
        {
          data_name: '2',
          name: '广州'
        },
        {
          data_name: '3',
          name: '杭州'
        },
        {
          data_name: '4',
          name: '成都'
        },
        {
          data_name: '5',
          name: '苏州'
        }
      ],
      letters: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'W', 'X', 'Y', 'Z'],

    }
    methods = {
      // 清空按钮
      deleteIcon(){
        this.searchResults = ''
        this.scrollShow = true
        this.focusShow = false
      },
      // 26字母滑动定位
      onListTouchStart({
        currentTarget,
        touches
      }) {
        const letter = currentTarget.dataset.letter
        this.onLetterTaped(letter)
        this.startPageY = touches[0].pageY
      },
      // 26字母滑动定位
      onListTouchMove({
        currentTarget,
        touches
      }) {
        const letter = currentTarget.dataset.letter
        const index = this.letters.indexOf(letter)
        const pageY = touches[0].pageY
        let dist = ~~(Math.abs(this.startPageY - pageY) / this.letterHeight)
        let isUp = false
        if (this.startPageY - pageY > 0) {
          isUp = true
        }
        if (dist) {
          let i = isUp ? index - dist : index + dist
          i < 0 && (i = 0)
          i > this.letters.length - 1 && (i = this.letters.length - 1)
          this.onLetterTaped(this.letters[i])
        }
      },
      // 26字母滑动定位
      onListTouchEnd() {
        if (this.timer) {
          clearTimeout(this.timer)
        }
        this.timer = setTimeout(() => {
          clearTimeout(this.timer)
          this.currentLetter = ''
          this.timer = null
          this.$apply()
        }, 750)
      },
      // 城市点击返回首页
      onSelected(item, e) {
        this.$parent.globalData.addressName = item.name
        wepy.navigateBack({
          url: './index'
        })
        this.$apply()
      },
      // 输入框获取点击搜索
      onFocus() {
        this.scrollShow = false
        this.focusShow = true
      },
      onInput ({ detail: { value } }) {
        if (!value.trim()) {
          return []
        }
        const reg = new RegExp(value, 'ig')
        this.searchResult = citys.filter(i => {
          return reg.test(i.name) || reg.test(i.search)
        })
        this.searchResults = value
        this.$apply()
      },
    }
    onLoad() {
      // wepy.getLocation().then(res=>{
      //   console.log(res)
      //   test(res).then(res=>{
      //     console.log(res)
      //     this.address = res
      //   })
      // })

      // this.hotCitys = this.getHotCity()
      // wx.showLoading({
      //   title: '加载中'
      // })
      // console.log(0)
      // try {
      //   const location = await this.getLocation()
      //   const ret = await this.getCityNameFromBaidu(location.latitude, location.longitude)
      //   this.location = ret
      //   this.$apply()
      //   console.log(1)
      // } catch (error) {
      //   this.locationFail = true
      //   this.$apply()
      //   console.log(2)
      // } finally {
      //   wx.hideLoading()
      //   console.log(3)
      // }
      
      this.citys = this.getLetterCity()
      this.$apply()
    }
    // 获取经纬度
    getLocation() {
      return new Promise((resolve, reject) => {
        wx.getLocation({
          type: 'wgs84',
          success: resolve,
          fail: reject
        })
      })
    }
    onLetterTaped(letter) {
      this.scrollIntoId = letter === '#' ? 'top' : letter
      this.currentLetter = letter
    }
    // 从百度接口获取城市名
    // getCityNameFromBaidu(latitude, longitude) {
    //   // 自己根据情况修改
    //   const ak = 'V6T2dSWME8uvr4NVui1ilrWFpDvuT70o'
    //   const url = `https://api.map.baidu.com/geocoder/v2/?location=${latitude},${longitude}&output=json&pois=1&ak=${ak}`
    //   return new Promise((resolve, reject) => {
    //     wepy.request(url).then(({
    //         data
    //       }) => {
    //         resolve(data.result.addressComponent.city)
    //       })
    //       .catch(reject)
    //   })
    // }
    getLetterCity() {
      let tempObj = []
      // letters.shift()
      for (let i = 0; i < this.letters.length; i++) {
        let letter = this.letters[i]
        let cityInfo = []
        let tempArr = {}
        tempArr.letter = letter
        for (let j = 0; j < citys.length; j++) {
          if (letter == citys[j].letter) {
            cityInfo.push(citys[j])
          }
        }
        tempArr.cityInfo = cityInfo
        tempObj.push(tempArr)
      }
      return tempObj
    }
    getHotCity() {
      const cityInfo = []
      const hotCode = ['110100', '310000', '440100', '440300', '330100', '320100']
      for (let item of citys) {
        if (hotCode.indexOf(item.code) !== -1) {
          cityInfo.push(item)
        }
      }
      this.letters.unshift('#')
      return cityInfo.sort((a, b) => a.code > b.code)
    }
  }
</script>
